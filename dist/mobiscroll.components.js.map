{"version":3,"sources":["../src/mobiscroll.components.ts"],"names":[],"mappings":"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","file":"mobiscroll.components.js","sourceRoot":"","sourcesContent":["import { Directive, Input, Output, EventEmitter, ElementRef } from \"@angular/core\"\nimport { MbscProvider } from \"./MbscProvider\"\nimport * as rx from \"rxjs\"\n\n export class MobiscrollDate {\n  public inst:{setVal:Function, _value:string, init:Function}\n  public setter:Function\n\n   public ngModel\n   public ngModelChange = new EventEmitter()\n\n   public mbscCalendar\n   public mbscCalendarChange = new EventEmitter<Date>()\n  \n   public mbscOptions:{onSet?:Function} = {}\n   public mbscOptionsChange = new EventEmitter()\n\n  constructor(public ElementRef:ElementRef, public MbscProvider:MbscProvider){}\n\n  ngOnInit(){\n    const orgOnSet = this.mbscOptions.onSet\n    \n    this.setter = this.mbscOptions.onSet = (event, inst)=>{\n      if(orgOnSet)orgOnSet(event, inst)\n      \n      this.mbscCalendar = inst.getVal()//event.valueText\n      this.mbscCalendarChange.emit( this.mbscCalendar )\n\n      this.ngModelChange.emit( this.ngModel=this.mbscCalendar )\n      setTimeout(()=>this.ElementRef.nativeElement.value=inst._value, 0)\n    }\n\n    this.inst = this.MbscProvider.getMobiscroll().date(this.ElementRef.nativeElement, this.mbscOptions)\nconsole.log('this.inst',this.inst)\n    //this.updateVal()\n\n    this.observeOptions()\n  }\n\n  observeOptions(){\nvar source = rx.Observable.of(this.mbscOptions).map(o => JSON.stringify(o))\n/*\n    var source = rx.Observable.from([this.mbscOptions]).flatMap(function(item) {\n      return item\n      return rx.Observable.ofObjectChanges(item);\n    })\n*/\n/*\nvar source = rx.Observable\n.ofObjectChanges( [this.mbscOptions] )\n.map(function(x) {\n  return JSON.stringify(x);\n})*/\n\nsource.subscribe(x=>console.log('x',x))\n\n  }\n\n  /*ngDoCheck(){\n    console.log(88)\n  }*/\n\n  updateVal(){\n    this.inst.setVal( this.mbscCalendar || this.ngModel )\n    this.ElementRef.nativeElement.value = this.inst._value\n  }\n\n  ngOnChanges(changes){\nconsole.log(0)\n    if(!this.inst)return\n\nconsole.log(1)\n    if(changes.mbscCalendar && changes.mbscCalendar.currentValue!=changes.mbscCalendar.previousValue){\n      this.updateVal()\n    }\n\nconsole.log(2)\n    if(changes.mbscOptions){\nconsole.log('reinit')\n      this.inst.init( Object.assign(changes.mbscOptions.currentValue, {onSet:this.setter}) )\n      this.observeOptions()\n    }\n\n    console.log('changes',changes)\n  }\n\n  ngAfterViewInit(){\n    setTimeout(()=>this.updateVal(), 0)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:'[mbsc-calendar]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MbscProvider, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngModel': [{ type: Input },],\n'ngModelChange': [{ type: Output },],\n'mbscCalendar': [{ type: Input, args: ['mbsc-calendar', ] },],\n'mbscCalendarChange': [{ type: Output, args: ['mbsc-calendarChange', ] },],\n'mbscOptions': [{ type: Input, args: ['mbsc-options', ] },],\n'mbscOptionsChange': [{ type: Output, args: ['mbsc-optionsChange', ] },],\n};\n}\n\nexport const declarations = [\n  MobiscrollDate\n]\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}